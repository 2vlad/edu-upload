## 0) Резюме релиза

**Цель:** повысить полноту источников и управляемость генерации, улучшить контроль качества курсов и дать экспорт в офлайн-форматы.

**Что добавляем:**

1. Вставка контента по ссылке (URL ingestion).
2. Роль **Админ**; на `/courses` админ видит **все** сгенерированные курсы.
3. Кнопка **«Провалидировать курс»** с автоматической проверкой структуры и содержательных несостыковок.
4. **Экспорт курса** (в `.txt` и `.md`, одиночный файл и пакет уроков).
5. Поле **«Авторский тон»** (tone of voice) перед генерацией, влияющее на промпт.

**Ключевые метрики успеха:**

* ≥30% курсов создаются с добавлением хотя бы одной ссылки.
* ≥80% новых курсов проходят валидацию без критических ошибок.
* ≥50% активных пользователей используют экспорт в течение 7 дней после генерации.
* NPS авторов по контролю качества ↑ (опрос в продукте).

---

## 1) Контекст и текущая архитектура (из наблюдаемого)

* Технологический стек: **TypeScript (≈96%)**, есть папка `supabase` (SQL/PLpgSQL), Next.js (структура `app/`), деплой на Vercel. ([GitHub][1])
* В проде стартовая страница: загрузка документов и изображений, селектор «Модель», кнопка «Создать курс». Поддерживаются **PDF, DOCX, MD, TXT, RTF, HTML и изображения**. ([Edu Upload App][2])
* В репозитории присутствуют `PRD.txt` и `PRD-db.txt`, что указывает на изначальные продуктовые/БД-заметки (можно продолжить в них). ([GitHub][1])

**Рабочие допущения:**

* Авторизация/БД — через Supabase (по структуре репо). Роли и RLS-политики настраиваем в `supabase/` миграциях. ([GitHub][1])
* UI-компоненты — вероятно shadcn/ui (наличие `components.json` характерно), но библиотека не принципиальна. ([GitHub][1])

---

## 2) Персоны и роли

* **Автор** (по умолчанию): видит **свои** курсы, создаёт/редактирует/валидирует/экспортирует свои курсы.
* **Админ**: помимо авторских прав, видит **все** курсы на `/courses`, может запускать валидацию и экспорт для любого курса.

---

## 3) Область работ (In/Out)

**In scope:**

* Серверный парсинг URL (HTML/редиректы/PDF → текст), антиспам/ограничения, предпросмотр.
* RBAC: роль `admin`, защищённый список курсов для админа.
* Детерминированная и LLM‑проверка курсов (структура/целостность/ссылки/технические проверки; опционально «глубокая» проверка с LLM).
* Экспорт в `.txt`/`.md` (единый файл и ZIP множества файлов), с метаданными.
* Поле «Авторский тон» в форме генерации и его влияние на промпты/метаданные курса.

**Out of scope (этого релиза):**

* Мультипровайдерная вычитка ссылок за paywall, краулинг по домену (только одна страница/прямая ссылка).
* Веб‑хук интеграции (Notion/Google Docs) — позже.
* Модерация пользовательского контента (базовая фильтрация — да; модераторская панель — нет).

---

## 4) Пользовательские сценарии и UX

### 4.1 Вставка контента ссылкой

* **Как автор**, я могу в блоке загрузки нажать «Добавить ссылку», вставить один или несколько URL, увидеть предпросмотр (заголовок, домен, 1‑2 абзаца), удалить/исправить и добавить в набор источников курса.
* Если сайт не отдал читаемый текст (JS‑рендер, блокировка, `robots.txt`), система покажет понятную ошибку и предложит загрузить файл или другой URL.

**UI (предложения):**

* На главной (страница создания) добавить вкладки/тоггл: **Файлы | Ссылки**. В «Ссылках»: поле ввода URL, кнопка «Извлечь», список добавленных ссылок с превью+кнопкой «Удалить».
* Лимиты: до **20 ссылок** за одну генерацию, размер извлечённого текста до **200 KB** на ссылку (настройки в `.env`).

### 4.2 Роль администратора / список курсов

* **Как админ**, на `/courses` я вижу **все** курсы (таблица: название, автор, статус, дата; фильтр по автору/статусу; поиск).
* **Как автор**, на этой же странице вижу только свои курсы (как сейчас).

### 4.3 «Провалидировать курс»

* На странице курса и в списке (`/courses`) доступна кнопка **«Провалидировать курс»**.
* Быстрая валидация (до 10–15 секунд) показывает чек‑лист: структура/ссылки/циклы/пререквизиты и статус `ОК`/`Предупреждение`/`Ошибка`.
* Расширенная валидация (опционально, через диалог «Быстрая / Глубокая») использует LLM для семантических несоответствий (обещания в `learning objectives` vs. фактическое содержание, противоречия терминов, отсутствие пояснений базовых понятий до их использования).
* Результаты сохраняются в историю валидизаций с таймштампом и ссылкой «Показать отчёт».

### 4.4 Экспорт курса

* В интерфейсе курса — меню **«Экспорт»** → варианты:

  * **Markdown (.md)** — единый файл *или* ZIP «по урокам».
  * **Plain Text (.txt)** — единый файл *или* ZIP «по урокам».
* Экспорт содержит: метаданные курса (название, автор, дата, уровень, длительность, тон), оглавление, уроки с подзаголовками; в `.md` — YAML‑frontmatter.
* При экспорте по урокам — имена файлов вида `01-intro.md`, `02-topic.md`, … (сортировка по `order`).

### 4.5 Авторский тон

* Перед генерацией — поле **«Авторский тон»** (`textarea`, до 1 000–2 000 символов) с подсказками/примерами:
  «Разговорный, дружелюбный, на простых примерах», «Строго академический», «С иронией, живыми метафорами», «Прагматичный, ориентирован на практику и код».
* Промпт‑билдер добавляет этот тон в **system/instruction** для моделей.

---

## 5) Функциональные требования (детально)

### 5.1 Инжест ссылок (URL ingestion)

**Принимаемые форматы:** `text/html`, `text/plain`, `application/pdf`; для PDF — тот же путь, что и для загружаемых файлов.
**Бэкэнд:**

* `POST /api/sources/ingest-url` `{ url: string }` → `{ title, byline?, text, wordCount, sourceUrl, contentType }`.
* Серверная загрузка по `fetch` с таймаутом (15 с), следование одному редиректу, **проверка robots.txt** (библиотека парсинга, allow/deny), размерный лимит ответа.
* Для HTML: парсинг «основного текста» (`jsdom` + `@mozilla/readability` или `unified` + `rehype` → `hast` → `mdast` → текст), очистка скриптов/стилей/навигации, нормализация ссылок.
* Для `text/plain`: прямое чтение, нормализация кодировки.
* Для `application/pdf`: загрузка и отправка в существующий PDF‑парсер (как у файлов).
* Хранение результата в таблице **`sources`** (см. §7) как `type='link'` с «сырым текстом» (для повторной генерации без повторных сетевых запросов) и «отформатированным видом» (для предпросмотра).

**Защита/лимиты:**

* Allow‑list/deny‑list доменов в `.env` (например, запрещаем соцсети, подозрительные домены).
* RATE‑LIMIT per user (например, 30 запросов/час).
* Максимальный общий объём извлечённого текста на генерацию (например, 1.5 MB).

**UX/ошибки:** читаемые сообщения («Сайт запретил индексирование», «Слишком большой ответ», «Проблема с сертификатом»), кнопка «Попробовать как PDF» для прямых ссылок на PDF.

### 5.2 Роль администратора и доступ к `/courses`

**БД и права:**

* Таблица `profiles` со столбцом `role` (`'user'|'admin'`), RLS‑политики:

  * `authors`: `courses.owner_id = auth.uid()`
  * `admins`: `profiles.role = 'admin'` → `SELECT` все курсы.
* В клиенте, после `supabase.auth.getSession()`, роль подтягивается из `profiles` (кэширование в `server components`).

**UI:**

* `/courses`: если `role=admin`, добавляются фильтры «Автор», «Статус», «Последняя валидация», «Имеются предупреждения».
* Экшены в строке: «Провалидировать», «Экспорт», «Открыть».

### 5.3 Валидация курса

**Критерии (детерминированные):**

* **Структура:** `lessons` образуют линейную или иерархическую последовательность без циклов; обязательна `order` и уникальные `title`.
* **Согласованность оглавления:** `outline` соответствует фактическому числу/структуре уроков.
* **Ссылочная целостность:** все внутренние ссылки на уроки резолвятся; внешние URL отвечают `2xx/3xx` (HEAD/GET с таймаутом).
* **Пререквизиты:** всё, что указано как prerequisite, встречается раньше по `order`.
* **Содержание:** минимальная длина урока (например, ≥300 слов), отсутствие пустых блоков.
* **Мета:** язык курса единообразен (ru/en), нет смешения кодировок.

**Критерии (LLM‑оценка, опционально):**

* **Objectives vs Content:** цели урока покрыты содержанием.
* **Термины:** ключевые термины определены до первого активного использования.
* **Плавность переходов:** резкие скачки уровня сложности помечаются.

**API/обработка:**

* `POST /api/courses/{id}/validate?mode=fast|deep`
  Возвращает объект: `{ status, startedAt, finishedAt?, checks: [...], summary, severity }`.
* Для длинных курсов — поток логов (SSE/stream) прямо в UI; без сложных очередей в первом релизе.
* Сохранение результатов в `course_validations` (см. §7).

**Вывод в UI:**

* Бейдж курса: `Validated ✓` / `Warnings !` / `Errors ✕` с датой.
* Детальный отчёт: таблица проверок, фильтр по severity, быстрые фиксы (ссылки «Открыть урок»).

### 5.4 Экспорт

**API:**

* `GET /api/courses/{id}/export?format=md|txt&mode=single|multi`

  * `single` → один файл (`course.md`/`course.txt`).
  * `multi` → ZIP со структурой `/lessons/01-...md` и `README.md` (общее описание + оглавление).
* В Markdown — YAML‑frontmatter:

  ```yaml
  ---
  title: ...
  author: ...
  level: ...
  language: ru
  tone: "Разговорный, дружелюбный"
  lessons: 12
  validated_at: 2025-10-08
  ---
  ```
* Кодировки: UTF‑8; переносы строк `\n`.
* Экранирование тройных кавычек/бэктиков внутри контента.

**UI:**

* Меню «Экспорт» на странице курса (иконка «скачать»), селектор формата/режима, прогресс и ссылка на скачивание.

### 5.5 Авторский тон

**Данные и промпт:**

* В `courses` добавить `author_tone TEXT`.
* Промпт‑билдер: блок **System/Style**:
  «Используй тон автора: `<user_tone>` (приоритетнее общих стилевых параметров). Избегай противоречий. Поддерживай единый стиль во всех уроках.»
* На карточке курса выводим «Тон: …».

**Валидация:**

* Серверная нормализация: урезать до лимита, удалять HTML, запрещённые символы/теги.

---

## 6) Нефункциональные требования

* **Производительность:** извлечение одной ссылки ≤ 3 с p50, ≤ 8 с p95; валидация fast ≤ 15 с p95 для курса до 12 уроков.
* **Надёжность:** graceful‑тайм‑ауты, повтор извлечения (1 ретрай).
* **Безопасность:** CORS off на ingestion (сервер‑to‑сервер), проверка `robots.txt`, ограничение доменов, антисниффинг заголовков, журналирование исходных URL.
* **Слежение:** логирование ingestion/validation/export (начало/успех/ошибка, длительность).
* **i18n:** не ломать текущий RU‑UX; тон может быть любым языком.

---

## 7) Изменения БД (Supabase, эволюционная схема)

> Ниже — ориентировочные DDL. Адаптировать под фактические названия таблиц/типов.

```sql
-- 7.1 Роли
create table if not exists profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  role text not null default 'user',
  created_at timestamptz default now()
);

-- 7.2 Курсы
alter table courses
  add column if not exists author_tone text,
  add column if not exists last_validated_at timestamptz,
  add column if not exists last_validation_severity text; -- 'ok' | 'warning' | 'error'

-- 7.3 Источники (файлы/ссылки)
create table if not exists sources (
  id uuid primary key default gen_random_uuid(),
  course_id uuid not null references courses(id) on delete cascade,
  type text not null check (type in ('file','link')),
  url text,                    -- для ссылок
  content_type text,           -- mime
  raw_text text,               -- нормализованный текст
  meta jsonb,
  created_at timestamptz default now()
);

-- 7.4 Результаты валидации
create table if not exists course_validations (
  id uuid primary key default gen_random_uuid(),
  course_id uuid not null references courses(id) on delete cascade,
  mode text not null check (mode in ('fast','deep')),
  started_at timestamptz default now(),
  finished_at timestamptz,
  summary text,
  severity text check (severity in ('ok','warning','error')),
  checks jsonb                 -- массив детальных проверок
);

-- 7.n RLS (пример)
alter table courses enable row level security;
create policy author_can_select on courses
  for select using (owner_id = auth.uid());
create policy admin_can_select_all on courses
  for select using (exists(select 1 from profiles p where p.id=auth.uid() and p.role='admin'));
```

---

## 8) API (контуры)

* `POST /api/sources/ingest-url` — см. §5.1
* `POST /api/courses/{id}/validate?mode=fast|deep` — см. §5.3
* `GET  /api/courses/{id}/export?format=md|txt&mode=single|multi` — см. §5.4

**Ответы — JSON (или поток для validate).** Ошибки в едином формате:

```json
{ "error": { "code": "URL_NOT_ALLOWED", "message": "Домен запрещён" } }
```

---

## 9) UI/UX — точки интеграции

* **`/` (создание курса):** добавить вкладку «Ссылки» с полем и предпросмотром; блок «Авторский тон».
* **`/courses` (таблица):** роль‑aware: для админа — все курсы + фильтры; экшены: «Провалидировать», «Экспорт», «Открыть».
* **`/courses/[id]`:** кнопка «Провалидировать курс», раздел «Последняя валидация», меню «Экспорт».

---

## 10) Правила приёмки (Acceptance Criteria)

**A. Вставка ссылок**

* При вводе валидного HTTP(S) и успешном парсинге пользователь видит предпросмотр (заголовок/домен/фрагмент).
* При ссылке на PDF — создаётся источник как файл‑тип; текст извлекается тем же механизмом, что и для загрузок.
* При нарушении `robots.txt` или превышении лимита — понятная ошибка; ссылка не добавляется.

**B. Админ‑доступ**

* Пользователь с `role=admin` на `/courses` видит больше курсов, чем с `role=user` (минимум все).
* Автор с `role=user` не может получить `200 OK` на чужой курс по REST.

**C. Валидация**

* Быстрая валидация возвращает структурированный отчёт (≥6 проверок); для курса без ошибок — `severity='ok'`.
* При намеренном удалении `order` у урока — `severity='error'` и конкретное сообщение.
* В отчёте отражаются недоступные внешние ссылки (напр., `404`).

**D. Экспорт**

* `format=md&mode=single` скачивает один Markdown‑файл с frontmatter и всеми уроками.
* `format=txt&mode=multi` скачивает ZIP с `.txt` по урокам и `README.txt`.
* Русские символы сохраняются корректно (UTF‑8).

**E. Авторский тон**

* Указанный тон появляется в метаданных курса и влияет на стиль выводимых уроков (видимые языковые маркеры).
* Тон сохраняется и доступен при повторной генерации/редакции.

---

## 11) Телеметрия и аналитика

* События: `url_ingest_started/succeeded/failed`, `course_validated`, `course_exported`, `tone_added`.
* Параметры: размер извлечённого текста, домен, длительность операций, количество предупреждений/ошибок.
* Дашборд: отказы по доменам, p95 времени извлечения, доля курсов с `severity='ok'`.

---

## 12) Риски и меры

* **Правовые/этичные:** соблюдение `robots.txt`, ограничение доменов, отказ от обхода paywall.
* **Производительность:** тяжёлые страницы → лимиты размера/тайм‑ауты; SSE‑лог при глубокой валидации.
* **Качество парсинга:** разные разметки HTML → fallback: `html-to-text`.
* **Стоимость LLM:** «Глубокую» проверку скрыть за явной кнопкой и лимитом длины курса/частоты.

---

## 13) Развёртывание и фичефлаги

* Флаг `feature_url_ingest`, `feature_validation`, `feature_export_md_txt`, `feature_admin_courses`, `feature_author_tone`.
* Катим частями: 1) admin + тон; 2) URL ingestion; 3) валидация fast; 4) экспорт; 5) deep‑validation.

---

## 14) Оценка трудоёмкости (T‑shirt size)

* URL ingestion (сервер, парсер, UI, предпросмотр): **L**
* RBAC админа на `/courses` (RLS, фильтры, UI): **M**
* Валидация fast (дет‑чек‑лист + отчёт): **M/L**
* Валидация deep (LLM‑оценка, поток): **M**
* Экспорт (md/txt, single/multi, ZIP): **M**
* Авторский тон (UI + промпт‑билдер + БД): **S**

---

## 15) Технические заметки по реализации

* **Парсинг HTML:** `jsdom` + `@mozilla/readability` (или альтернативная связка `unified/rehype/remark`), затем нормализация в плоский текст; храним сырой текст в `sources.raw_text`.
* **Проверка ссылок:** параллельные `HEAD` с ограничением степени параллелизма (напр., `p-map` с `concurrency=8`), таймаут 3–5 с.
* **Stream‑валидация:** Next.js Route Handler с `ReadableStream` (лог шагов), UI — консолька выполнения.
* **ZIP:** `jszip` или `archiver`, генерация в памяти с отдачей `application/zip`.
* **RLS:** строгое разделение прав; на уровне UI — не полагаться на роль, всегда доверять БД‑фильтрации.

---

## 16) Примеры типов (упрощённо)

```ts
type Lesson = {
  id: string; order: number; title: string; content: string;
  objectives?: string[]; prerequisites?: string[]; references?: string[];
};

type ValidationCheck = {
  id: string; name: string; status: 'ok'|'warning'|'error'; message?: string; lessonId?: string;
};
```

---

## 17) Регресс‑тесты (чек‑лист)

* Инжест 3 валидных ссылок (HTML+TXT+PDF) → все добавлены, предпросмотр есть.
* Инжест запрещённого домена → понятная ошибка.
* `/courses` под админом → видны курсы разных авторов; под юзером → только свои.
* Курс с битой внутренней ссылкой → валидация `error`.
* Экспорт `md/multi` → ZIP с отсортированными уроками и корректным frontmatter.
* Тон с HTML‑вставками → очищен; длина обрезана по лимиту.

---

### Источники, использованные при изучении

* Структура репозитория, наличие `supabase/`, `components.json`, PRD‑файлов, языковые доли: страница репозитория. ([GitHub][1])
* Продовая страница приложения и поддерживаемые форматы загрузки (PDF/DOCX/MD/TXT/RTF/HTML/изображения): **edu‑upload‑app.vercel.app**. ([Edu Upload App][2])

---

Если нужно, могу сразу оформить это в виде задач в Issues (по блокам с Acceptance Criteria) и приложить SQL‑миграции/каркасы API‑роутов.

[1]: https://github.com/2vlad/edu-upload "GitHub - 2vlad/edu-upload"
[2]: https://edu-upload-app.vercel.app/ "Создатель курсов из PDF"
